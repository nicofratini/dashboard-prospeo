

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;


CREATE EXTENSION IF NOT EXISTS "pg_net" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgsodium" WITH SCHEMA "pgsodium";






COMMENT ON SCHEMA "public" IS 'standard public schema';



CREATE EXTENSION IF NOT EXISTS "pg_graphql" WITH SCHEMA "graphql";






CREATE EXTENSION IF NOT EXISTS "pg_stat_statements" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgcrypto" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "pgjwt" WITH SCHEMA "extensions";






CREATE EXTENSION IF NOT EXISTS "supabase_vault" WITH SCHEMA "vault";






CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA "extensions";






CREATE OR REPLACE FUNCTION "public"."add_suggestion_with_tags"("title" "text", "details" "text", "type" integer, "tag_ids" integer[]) RETURNS integer
    LANGUAGE "plpgsql"
    AS $$DECLARE
  suggestion_id INT;
  tag_id INT; -- Declare the loop variable here
BEGIN
  -- Insert the suggestion into the suggestions table
  INSERT INTO suggestions (title, details, suggestion_type)
  VALUES (title, details, type)
  RETURNING id INTO suggestion_id;

  -- Insert tags into the suggestion_tags table
  FOREACH tag_id IN ARRAY tag_ids
  LOOP
    INSERT INTO suggestions_tags_mapping (suggestion_id, tag_id)
    VALUES (suggestion_id, tag_id);
  END LOOP;

  -- Return the suggestion_id
  RETURN suggestion_id;
END;$$;


ALTER FUNCTION "public"."add_suggestion_with_tags"("title" "text", "details" "text", "type" integer, "tag_ids" integer[]) OWNER TO "postgres";


CREATE OR REPLACE FUNCTION "public"."update_suggestion_votes"() RETURNS "trigger"
    LANGUAGE "plpgsql" SECURITY DEFINER
    AS $$BEGIN
  IF tg_op = 'INSERT' THEN
    UPDATE suggestions
    SET votes = votes + 1
    WHERE id = new.suggestion_id;
  ELSIF tg_op = 'DELETE' THEN
    UPDATE suggestions
    SET votes = votes - 1
    WHERE id = old.suggestion_id;
  END IF;
  RETURN NULL;
END;$$;


ALTER FUNCTION "public"."update_suggestion_votes"() OWNER TO "postgres";

SET default_tablespace = '';

SET default_table_access_method = "heap";


CREATE TABLE IF NOT EXISTS "public"."newsletters_subscribers" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "email" "text" NOT NULL,
    "full_name" "text",
    "note" "text"
);


ALTER TABLE "public"."newsletters_subscribers" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."permissions" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "permission_name" character varying
);


ALTER TABLE "public"."permissions" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."profile_roles" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "profile_id" "uuid" NOT NULL,
    "role_id" "uuid"
);


ALTER TABLE "public"."profile_roles" OWNER TO "postgres";


ALTER TABLE "public"."profile_roles" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."profile_roles_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."profiles" (
    "profile_id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "user_id" "uuid",
    "first_name" "text",
    "last_name" "text",
    "date_of_birth" "date",
    "gender" "text",
    "profile_picture_url" "text",
    "bio" "text",
    "address" "jsonb",
    "interests" "text"[],
    "social_links" "jsonb",
    "preferences" "jsonb",
    "occupation" "text",
    "email" "text" NOT NULL,
    "full_name" "text",
    "is_subscribed" boolean DEFAULT false NOT NULL
);


ALTER TABLE "public"."profiles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."roles" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "role_name" "text" NOT NULL,
    "product_id" "text"
);


ALTER TABLE "public"."roles" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."suggestion_tags" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text"
);


ALTER TABLE "public"."suggestion_tags" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."suggestion_types" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "name" "text" NOT NULL
);


ALTER TABLE "public"."suggestion_types" OWNER TO "postgres";


ALTER TABLE "public"."suggestion_types" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."suggestion_type_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



ALTER TABLE "public"."suggestion_tags" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."suggestion_types_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."suggestions" (
    "id" bigint NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "title" "text" NOT NULL,
    "details" "text",
    "suggestion_type" bigint,
    "votes" bigint DEFAULT '0'::bigint NOT NULL
);


ALTER TABLE "public"."suggestions" OWNER TO "postgres";


ALTER TABLE "public"."suggestions" ALTER COLUMN "id" ADD GENERATED BY DEFAULT AS IDENTITY (
    SEQUENCE NAME "public"."suggestions_id_seq"
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);



CREATE TABLE IF NOT EXISTS "public"."suggestions_tags_mapping" (
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "suggestion_id" bigint NOT NULL,
    "tag_id" bigint NOT NULL
);


ALTER TABLE "public"."suggestions_tags_mapping" OWNER TO "postgres";


CREATE TABLE IF NOT EXISTS "public"."suggestions_votes" (
    "id" "uuid" DEFAULT "gen_random_uuid"() NOT NULL,
    "created_at" timestamp with time zone DEFAULT "now"() NOT NULL,
    "suggestion_id" bigint,
    "user_id" "uuid" DEFAULT "auth"."uid"()
);


ALTER TABLE "public"."suggestions_votes" OWNER TO "postgres";


ALTER TABLE ONLY "public"."newsletters_subscribers"
    ADD CONSTRAINT "newsletters_subscribers_pkey" PRIMARY KEY ("email");



ALTER TABLE ONLY "public"."permissions"
    ADD CONSTRAINT "permissions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile_roles"
    ADD CONSTRAINT "profile_roles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile_roles"
    ADD CONSTRAINT "profile_roles_profile_id_key" UNIQUE ("profile_id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_pkey" PRIMARY KEY ("profile_id");



ALTER TABLE ONLY "public"."roles"
    ADD CONSTRAINT "roles_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."suggestion_types"
    ADD CONSTRAINT "suggestion_type_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."suggestion_tags"
    ADD CONSTRAINT "suggestion_types_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."suggestions"
    ADD CONSTRAINT "suggestions_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."suggestions_tags_mapping"
    ADD CONSTRAINT "suggestions_tags_mapping_pkey" PRIMARY KEY ("suggestion_id", "tag_id");



ALTER TABLE ONLY "public"."suggestions_votes"
    ADD CONSTRAINT "suggestions_votes_pkey" PRIMARY KEY ("id");



ALTER TABLE ONLY "public"."profile_roles"
    ADD CONSTRAINT "unique_profile_role" UNIQUE ("profile_id", "role_id");



CREATE OR REPLACE TRIGGER "update_suggestion_votes_trigger" AFTER INSERT OR DELETE ON "public"."suggestions_votes" FOR EACH ROW EXECUTE FUNCTION "public"."update_suggestion_votes"();



ALTER TABLE ONLY "public"."profile_roles"
    ADD CONSTRAINT "profile_roles_profile_id_fkey" FOREIGN KEY ("profile_id") REFERENCES "public"."profiles"("profile_id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."profile_roles"
    ADD CONSTRAINT "profile_roles_role_id_fkey" FOREIGN KEY ("role_id") REFERENCES "public"."roles"("id");



ALTER TABLE ONLY "public"."profiles"
    ADD CONSTRAINT "profiles_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."suggestions"
    ADD CONSTRAINT "suggestions_suggestion_type_fkey" FOREIGN KEY ("suggestion_type") REFERENCES "public"."suggestion_types"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."suggestions_tags_mapping"
    ADD CONSTRAINT "suggestions_tags_mapping_suggestion_id_fkey" FOREIGN KEY ("suggestion_id") REFERENCES "public"."suggestions"("id") ON DELETE CASCADE;



ALTER TABLE ONLY "public"."suggestions_tags_mapping"
    ADD CONSTRAINT "suggestions_tags_mapping_tag_id_fkey" FOREIGN KEY ("tag_id") REFERENCES "public"."suggestion_tags"("id") ON DELETE SET NULL;



ALTER TABLE ONLY "public"."suggestions_votes"
    ADD CONSTRAINT "suggestions_votes_suggestion_id_fkey" FOREIGN KEY ("suggestion_id") REFERENCES "public"."suggestions"("id") ON UPDATE CASCADE;



ALTER TABLE ONLY "public"."suggestions_votes"
    ADD CONSTRAINT "suggestions_votes_user_id_fkey" FOREIGN KEY ("user_id") REFERENCES "auth"."users"("id") ON UPDATE CASCADE;



CREATE POLICY "Enable delete for users based on user_id" ON "public"."suggestions_votes" FOR DELETE USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable insert for authenticated users only" ON "public"."newsletters_subscribers" FOR INSERT WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."suggestions" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for authenticated users only" ON "public"."suggestions_tags_mapping" FOR INSERT TO "authenticated" WITH CHECK (true);



CREATE POLICY "Enable insert for users based on user_id" ON "public"."suggestions_votes" FOR INSERT WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable read access for all users" ON "public"."suggestion_tags" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."suggestion_types" FOR SELECT USING (true);



CREATE POLICY "Enable read access for all users" ON "public"."suggestions" FOR SELECT USING (true);



CREATE POLICY "Enable select for authenticated users only" ON "public"."suggestions_tags_mapping" FOR SELECT TO "authenticated" USING (true);



CREATE POLICY "Enable select for users based on user_id" ON "public"."suggestions_votes" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable update for authenticated users only" ON "public"."suggestions" FOR UPDATE TO "authenticated" USING (true) WITH CHECK (true);



CREATE POLICY "Enable update for users based on email" ON "public"."profiles" FOR UPDATE TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id")) WITH CHECK ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



CREATE POLICY "Enable users to view their own data only" ON "public"."profiles" FOR SELECT TO "authenticated" USING ((( SELECT "auth"."uid"() AS "uid") = "user_id"));



ALTER TABLE "public"."newsletters_subscribers" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."permissions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profile_roles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."profiles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."roles" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestion_tags" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestion_types" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestions" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestions_tags_mapping" ENABLE ROW LEVEL SECURITY;


ALTER TABLE "public"."suggestions_votes" ENABLE ROW LEVEL SECURITY;




ALTER PUBLICATION "supabase_realtime" OWNER TO "postgres";





GRANT USAGE ON SCHEMA "public" TO "postgres";
GRANT USAGE ON SCHEMA "public" TO "anon";
GRANT USAGE ON SCHEMA "public" TO "authenticated";
GRANT USAGE ON SCHEMA "public" TO "service_role";






































































































































































































GRANT ALL ON FUNCTION "public"."add_suggestion_with_tags"("title" "text", "details" "text", "type" integer, "tag_ids" integer[]) TO "anon";
GRANT ALL ON FUNCTION "public"."add_suggestion_with_tags"("title" "text", "details" "text", "type" integer, "tag_ids" integer[]) TO "authenticated";
GRANT ALL ON FUNCTION "public"."add_suggestion_with_tags"("title" "text", "details" "text", "type" integer, "tag_ids" integer[]) TO "service_role";



GRANT ALL ON FUNCTION "public"."update_suggestion_votes"() TO "anon";
GRANT ALL ON FUNCTION "public"."update_suggestion_votes"() TO "authenticated";
GRANT ALL ON FUNCTION "public"."update_suggestion_votes"() TO "service_role";





















GRANT ALL ON TABLE "public"."newsletters_subscribers" TO "anon";
GRANT ALL ON TABLE "public"."newsletters_subscribers" TO "authenticated";
GRANT ALL ON TABLE "public"."newsletters_subscribers" TO "service_role";



GRANT ALL ON TABLE "public"."permissions" TO "anon";
GRANT ALL ON TABLE "public"."permissions" TO "authenticated";
GRANT ALL ON TABLE "public"."permissions" TO "service_role";



GRANT ALL ON TABLE "public"."profile_roles" TO "anon";
GRANT ALL ON TABLE "public"."profile_roles" TO "authenticated";
GRANT ALL ON TABLE "public"."profile_roles" TO "service_role";



GRANT ALL ON SEQUENCE "public"."profile_roles_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."profile_roles_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."profile_roles_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."profiles" TO "anon";
GRANT ALL ON TABLE "public"."profiles" TO "authenticated";
GRANT ALL ON TABLE "public"."profiles" TO "service_role";



GRANT ALL ON TABLE "public"."roles" TO "anon";
GRANT ALL ON TABLE "public"."roles" TO "authenticated";
GRANT ALL ON TABLE "public"."roles" TO "service_role";



GRANT ALL ON TABLE "public"."suggestion_tags" TO "anon";
GRANT ALL ON TABLE "public"."suggestion_tags" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestion_tags" TO "service_role";



GRANT ALL ON TABLE "public"."suggestion_types" TO "anon";
GRANT ALL ON TABLE "public"."suggestion_types" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestion_types" TO "service_role";



GRANT ALL ON SEQUENCE "public"."suggestion_type_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."suggestion_type_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."suggestion_type_id_seq" TO "service_role";



GRANT ALL ON SEQUENCE "public"."suggestion_types_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."suggestion_types_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."suggestion_types_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."suggestions" TO "anon";
GRANT ALL ON TABLE "public"."suggestions" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestions" TO "service_role";



GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "anon";
GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "authenticated";
GRANT ALL ON SEQUENCE "public"."suggestions_id_seq" TO "service_role";



GRANT ALL ON TABLE "public"."suggestions_tags_mapping" TO "anon";
GRANT ALL ON TABLE "public"."suggestions_tags_mapping" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestions_tags_mapping" TO "service_role";



GRANT ALL ON TABLE "public"."suggestions_votes" TO "anon";
GRANT ALL ON TABLE "public"."suggestions_votes" TO "authenticated";
GRANT ALL ON TABLE "public"."suggestions_votes" TO "service_role";



ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON SEQUENCES  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON FUNCTIONS  TO "service_role";






ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "postgres";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "anon";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "authenticated";
ALTER DEFAULT PRIVILEGES FOR ROLE "postgres" IN SCHEMA "public" GRANT ALL ON TABLES  TO "service_role";






























RESET ALL;
